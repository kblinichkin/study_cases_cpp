#include <bits/stdc++.h>
#include <sstream>

using namespace std;

vector<string> split_string(string);

/*
 * Complete the realEstateBroker function below.
 */
int realEstateBroker(const vector<vector<int>>& clients, list<vector<int>> houses) {
    /*
     * Write your code here.
     */
    int counter {0};
    for (const auto& client : clients) {        
        if (houses.empty())
            break;
            
        auto it = houses.begin();
        while (it != houses.end()) {
            if (client[0] < (*it)[0] and
                client[1] >= (*it)[1]) {
                it = houses.erase(it);
                ++counter;
            } else {
                ++it;
            }
            // if (client[0] < (*it)[0] and client[1] >= (*it)[1]) {
            //     (*it)[0] = -1;
            //     ++counter;
            // }
            // ++it;
        }
    }

    return counter;
}

/* static const std::string output1 = {"3 3\n\*/
static const std::string output1 = {"\
5 110\n\
9 500\n\
20 400\n\
10 100\n\
2 200\n\
30 300"};

/* static const std::string output2 = {"162 197\n\*/
static const std::string output2 = {"\
257962434 403154719\n\
436014684 386055623\n\
864779840 321581947\n\
553142839 251462534\n\
375990440 415085597\n\
188978234 272502993\n\
527930825 149057078\n\
237818565 252512356\n\
350000022 378994633\n\
524175792 202308551\n\
485318707 796456722\n\
328581109 848960767\n\
17229860 861770502\n\
884938231 983291083\n\
82570285 922071066\n\
848188276 623573627\n\
329810422 536150452\n\
978456992 859681491\n\
533805324 12475200\n\
32781524 556204534\n\
386905008 976681492\n\
717275361 42352480\n\
383818955 491717553\n\
819091879 751166975\n\
850186914 71028834\n\
733225619 250808629\n\
170094069 37080092\n\
597952039 352342520\n\
874886622 382843896\n\
377940819 119675162\n\
172629135 564597155\n\
309604607 930324505\n\
874577784 631873958\n\
330885006 233950744\n\
642045931 233314486\n\
747184106 366797475\n\
326833348 90124939\n\
712743431 581821278\n\
165862008 676782105\n\
862864630 703144706\n\
586900700 35123641\n\
988356741 315786822\n\
619813472 6523143\n\
857993560 850878046\n\
198228996 479544897\n\
206815512 458277775\n\
931361593 490575269\n\
248050923 434100526\n\
595218947 176785921\n\
228947150 710789154\n\
651540253 984976320\n\
489805054 877949345\n\
855626018 826412037\n\
417392514 253347341\n\
604226994 549842488\n\
13637575 382250912\n\
561413247 720831230\n\
470897655 960458219\n\
47139432 118658943\n\
621164951 98472574\n\
165690956 973713652\n\
155290107 763079629\n\
842368910 364492047\n\
764132967 792322442\n\
971190676 594837604\n\
315648248 594906875\n\
729708361 879740844\n\
391450363 254548068\n\
147639611 623320137\n\
844002702 646197866\n\
671247904 993886370\n\
755062492 25920914\n\
174947747 514142081\n\
692650776 282615038\n\
332119306 898602335\n\
270101031 324269321\n\
697613620 300456238\n\
26107707 726074837\n\
970939526 304332124\n\
174551516 432427529\n\
450179570 35168239\n\
583960245 382742760\n\
896438544 755096177\n\
239653184 593064728\n\
990936797 152595971\n\
318382307 880753374\n\
577561296 359599807\n\
181594096 942743072\n\
668269993 904340974\n\
168278306 156979880\n\
90358617 976655977\n\
527902931 81964336\n\
749033258 444681351\n\
200433028 180874214\n\
58766139 126903302\n\
45623955 122114151\n\
1572475 374854\n\
250964846 850245841\n\
930415752 281195699\n\
485442956 9888297\n\
991259702 238524260\n\
267784199 60658351\n\
48626932 885683160\n\
853048504 841643124\n\
13980354 639505762\n\
928573816 210357338\n\
216958016 870122713\n\
813365347 893774824\n\
263262488 951474790\n\
314212411 276857504\n\
292885696 933630547\n\
236161883 526488331\n\
264036971 701514319\n\
644889783 703554480\n\
964929747 227043257\n\
268098904 910196078\n\
787893795 824102542\n\
890564527 525274918\n\
473903927 159430392\n\
114835881 428092517\n\
337330827 412740667\n\
788327328 967502947\n\
630483870 926961872\n\
828491535 38809977\n\
962658689 5819076\n\
350028424 829974598\n\
738685532 120237722\n\
104059966 215540586\n\
713518383 38376254\n\
387701705 270586584\n\
901178018 481206430\n\
176799191 907516909\n\
730300236 159550228\n\
673502104 837405709\n\
789712448 606212135\n\
313299338 490810294\n\
147083981 689592449\n\
81887657 370013698\n\
731507495 711738630\n\
118657171 18800163\n\
148797951 643481646\n\
949220794 155544041\n\
235282570 42628763\n\
65592482 555789395\n\
956741045 242557769\n\
67015701 577989362\n\
923152791 770020727\n\
569683772 994112564\n\
573743458 366854933\n\
140524865 453783131\n\
676848818 175678474\n\
397613268 774754077\n\
389313764 883710816\n\
748472296 756065629\n\
931784510 475396473\n\
785308633 601404346\n\
732187402 236186348\n\
951467767 789621865\n\
966636208 710115493\n\
790651992 993060668\n\
880800815 609511691\n\
259109102 804551991\n\
731473438 537555295\n\
525275183 896830712\n\
911686589 637072013\n\
499289068 287012473\n\
155480035 720873285\n\
863128607 917889306\n\
868579363 731893610\n\
337578506 738854665\n\
476004182 877790766\n\
443163019 754372922\n\
362768119 888027371\n\
531208797 542070006\n\
584141498 83624064\n\
715039920 278490295\n\
660591809 59925538\n\
302728377 780840019\n\
894658117 771554926\n\
414785405 311057369\n\
623630808 887995783\n\
461172225 166460644\n\
165505777 64231441\n\
720941813 150501018\n\
831006895 836061751\n\
359336947 782929330\n\
549486238 646688493\n\
195146179 194716062\n\
64620846 482934953\n\
282724197 574673635\n\
879876515 826969109\n\
234739959 253101292\n\
377393992 67308220\n\
690077947 889465667\n\
226026910 666828635\n\
192304125 95788022\n\
474871105 763388410\n\
559258284 558129382\n\
739051892 147955826\n\
816351901 23012311\n\
932949984 902110779\n\
363902254 305712760\n\
541279069 587873300\n\
927017722 160127658\n\
497527247 728508725\n\
148411380 58226984\n\
467528903 898015148\n\
826637600 608682893\n\
504016957 107053905\n\
263159287 596858953\n\
449846175 327178304\n\
293824783 557595894\n\
723168193 379186764\n\
869793989 447699578\n\
125734637 690765987\n\
294210934 516695871\n\
171400230 109674926\n\
487641188 546132894\n\
4303218 320073077\n\
745783804 677521194\n\
45338759 195060009\n\
200561193 624900372\n\
912173197 483206491\n\
878114411 867765542\n\
663302822 364051357\n\
768249811 107435160\n\
596949367 91531333\n\
421126016 483617708\n\
258391817 556026645\n\
975555536 402806723\n\
964830436 845588317\n\
960946557 714343831\n\
979625346 607117438\n\
820798070 656211214\n\
962711360 819696663\n\
935254244 652771909\n\
285820426 239171131\n\
906928973 436093050\n\
602392208 146196165\n\
558105741 935534174\n\
132330442 234722837\n\
914289552 644520394\n\
341043800 57514244\n\
225899894 341210576\n\
889599566 961004002\n\
28334365 852764649\n\
213486268 99892118\n\
527733502 599217642\n\
954685074 412371338\n\
465035412 145077349\n\
185153505 878636619\n\
525542961 934056907\n\
675225228 541783130\n\
937413228 203955421\n\
866184345 450450958\n\
835129981 34907078\n\
528471906 754441973\n\
975568491 969869247\n\
943365462 16845226\n\
817452886 703079551\n\
852008831 95500529\n\
972608580 248485398\n\
368261591 574783835\n\
343495185 141390118\n\
6319293 943184577\n\
243959120 183809935\n\
597515225 566226645\n\
617047557 553661576\n\
292491046 827427196\n\
452413368 596743160\n\
154743680 790707914\n\
584960687 908968336\n\
419818872 347272912\n\
477497234 130106733\n\
75035678 870969422\n\
894882788 205469582\n\
379310396 366334130\n\
683477454 946351424\n\
679059253 714155865\n\
683183344 93348299\n\
251308673 261264272\n\
112513775 166760481\n\
75669924 34156579\n\
611110800 232882371\n\
101610901 695351834\n\
427444212 14980713\n\
940830731 82910134\n\
250814521 698718572\n\
313343916 460125934\n\
37383707 923200626\n\
74758371 797751386\n\
127255071 358865119\n\
313933016 729835858\n\
683950825 806332815\n\
184301078 529963734\n\
860811882 496777099\n\
261364401 360708327\n\
891617972 753676034\n\
287348485 564190311\n\
233459400 458383193\n\
162863480 683399966\n\
716877477 579604583\n\
469163145 52156222\n\
111987679 302389938\n\
368223959 132799634\n\
49029328 171279769\n\
132337831 281910078\n\
145862171 849732751\n\
965912017 91192088\n\
922725315 514517582\n\
514071591 167945934\n\
727032214 565997851\n\
13266280 924620025\n\
407861798 955577356\n\
725177826 382046676\n\
165248423 719563284\n\
961140849 70750982\n\
115069685 536089951\n\
899704094 243705415\n\
660609292 320891100\n\
923173765 498256473\n\
240460689 980961820\n\
684340983 884149435\n\
239317154 410645360\n\
280710336 512804554\n\
121965250 938591276\n\
917269889 88580559\n\
861287442 833910536\n\
302346690 181723468\n\
192967123 299333241\n\
857237008 233604942\n\
497646387 591898876\n\
352092112 246959140\n\
731686323 490179143\n\
413330548 28021616\n\
781738356 339563183\n\
224799250 763599385\n\
609860799 466805073\n\
939393148 884054343\n\
871238789 493666199\n\
940543776 22645436\n\
423611497 996969298\n\
387752112 258170080\n\
275740184 495914613\n\
274041735 892185899\n\
201009429 766490128\n\
674020505 185346158\n\
780269090 993591279\n\
479615472 323369817\n\
238769345 485392236\n\
649340844 473170804\n\
884560362 186545873\n\
839189094 884036976\n\
537212466 581951281\n\
211299801 882286689\n\
730476880 862650755\n\
222204611 90526974\n\
369697237 466443668\n\
214579893 551003477"};

static const std::string output3 = {"\
5 110\n\
9 500\n\
20 400\n\
20 400\n\
10 100\n\
2 200\n\
2 200\n\
30 300"};

int main()
{
    // stringstream fout(output1);

    // string nm_temp;
    // getline(cin, nm_temp);

    stringstream s_in(output3);
    // vector<string> nm = split_string("3 3"); //162 197
    // vector<string> nm = split_string("162 197");
    vector<string> nm = split_string("4 4");
    
    // for (const auto& n : nm)
    //     cout << nm[0] << " ";
    // cout << endl;

    int n = stoi(nm[0]);

    int m = stoi(nm[1]);

    vector<vector<int>> clients(n);
    for (int clients_row_itr = 0; clients_row_itr < n; clients_row_itr++) {
        clients[clients_row_itr].resize(2);

        for (int clients_column_itr = 0; clients_column_itr < 2; clients_column_itr++) {
            s_in >> clients[clients_row_itr][clients_column_itr];
        }

        s_in.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    // vector<vector<int>> houses(m);
    list<vector<int>> houses;
    for (int houses_row_itr = 0; houses_row_itr < m; houses_row_itr++) {
        // houses[houses_row_itr].resize(2);
        vector<int> temp(2);

        for (int houses_column_itr = 0; houses_column_itr < 2; houses_column_itr++) {
            // cin >> houses[houses_row_itr][houses_column_itr];
            s_in >> temp[houses_column_itr];
        }
        
        houses.push_back(std::move(temp));

        s_in.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int result = realEstateBroker(clients, houses);

    cout << result << "\n";

    // fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
